# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: cloud-backend1
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

plugins:
  - serverless-plugin-existing-s3
  - serverless-python-requirements

provider:
  name: aws
  region: ap-northeast-2
  profile: artclip-devmin
  deploymentBucket:
    name: artclip-serverless
    tags: 
      key1: artclip
# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
iamRoleStatements:
  - Effect: "Allow"
    Action:
      - "s3:*"
    Resource: "arn:aws:s3:::artclip-input/*"
  - Effect: "Allow"
    Action:
      - "lambda:InvokeFunction"
      # - "lambda:InvokeAsync"
    Resource: "*"  
  - Effect: Allow
    Action:
      - dynamodb:Query
      - dynamodb:Scan
      - dynamodb:GetItem
      - dynamodb:PutItem
      - dynamodb:UpdateItem
      - dynamodb:DeleteItem
    Resource: 
      - "arn:aws:dynamodb:ap-northeast-2:129219767314:table/artclip"
  # - Effect: Allow
  #   Action:
  #     - dynamodb:Query
  #     - dynamodb:Scan
  #   Resource:
  #     - "index"
resources: 
  Resources:
    DynamoDbTableArtclip:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: artclip
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
        KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    LambdaAPIRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: artclip-lambdaAPIRole1
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        Path: "/"
        Policies:
          -
            PolicyName: artclip-lambdaAPIPolicy1
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: "Allow"
                  Action:
                    - lambda:ListFunctions
                    - lambda:InvokeFunction
                    - lambda:GetFunction
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: "*"

                # S3 업로드 권한 
                -
                  Effect: "Allow"
                  Action:
                    - s3:PutObject
                    - s3:GetObject
                    - s3:PutObjectAcl
                  Resource: "arn:aws:s3:::artclip-input/*"
                -
                  # Effect: "Allow"
                  # Action:
                  #   - s3:PutObject
                  #   - s3:GetObject
                  #   - s3:ListBucket
                  # Resource: 
                  #   - "arn:aws:s3:::artclip-input/*"
                  #   - "arn:aws:s3:::artclip-output/*"

                  # Effect: "Allow"
                  # Action:
                  #   - s3:DeleteObject
                  #   - s3:PutObjectTagging
                  # Resource:
                  #   - "arn:aws:s3:::artclip-input/*"
                  #   - "arn:aws:s3:::artclip-output/*"
                
                  Effect: "Allow"
                  Action:
                    - dynamodb:PutItem
                    - dynamodb:DeleteItem
                    - dynamodb:GetItem
                    - dynamodb:Scan
                    - dynamodb:Query
                    - dynamodb:UpdateItem
                  Resource:
                    - !GetAtt DynamoDbTableArtclip.Arn
                 
                
    LambdaJobRole1:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: artclip-lambdaJobRole1
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        Path: "/"
        Policies:
          -
            PolicyName: artclip-lambdaJobPolicy1
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: "Allow"
                  Action:
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                    - mediaconvert:*
                    - iam:ListRoles
                    - lambda:ListFunctions
                    - lambda:InvokeFunction
                    - lambda:GetFunction
                  Resource: "*"
                -
                  Effect: "Allow"
                  Action:
                    - s3:PutObject
                    - s3:GetObject
                  Resource:
                    - "arn:aws:s3:::artclip-input/*"
                    - "arn:aws:s3:::artclip-output/*"
                -
                  Effect: "Allow"
                  Action:
                    - iam:PassRole
                    - s3:GetBucketNotification
                    - s3:PutBucketNotification
                    - dynamodb:PutItem
                    - dynamodb:DeleteItem
                    - dynamodb:GetItem
                    - dynamodb:Scan
                    - dynamodb:Query
                    - dynamodb:UpdateItem
                  Resource:
                    - !GetAtt MediaConvertRole.Arn
                    - !GetAtt DynamoDbTableArtclip.Arn
    MediaConvertRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: artclip-mediaConvertRole1
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Principal:
                Service:
                  - mediaconvert.amazonaws.com
              Action:
                - sts:AssumeRole
        Path: "/"
        Policies:
          -
            PolicyName: artclip-mediaConvertPolicy1
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: "Allow"
                  Action: mediaconvert:*
                  Resource: "*"
                -
                  Effect: "Allow"
                  Action:
                    - s3:PutObject
                    - s3:GetObject
                  Resource:
                    - "arn:aws:s3:::artclip-input/*"
                    - "arn:aws:s3:::artclip-output/*"

# you can define service wide environment variables here
  # environment:
  #   ACCESS_KEY_ID: AKIAR4FQZFQJKNY4MFUU
  #   SECRET_ACCESS_KEY: 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
  #   BUCKET_REGION: ap-northeast-2

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**
custom:
  environment: hackton
  prune:
    automatic: true
    number: 3
  base: v1
  allow-headers: 
    - Content-Type
    - X-Amz-Date
    - Authorization
    - X-Api-Key
    - X-Amz-Security-Token
    - X-Amz-User-Agent
    - S-Id

    
functions:
  upload:
    runtime: nodejs12.x
    handler: src/node/upload.video_content
    events:
      - http:
          path: ${self:custom.base}/video/upload/
          method: post
          cors:
            origin: '*'
            headers: ${self:custom.allow-headers}
            allowCredentials: false
    # role: arn:aws:iam::129219767314:role/artclip-lambda-job-role
    role: LambdaJobRole1

  s3_trigger:
    runtime: python3.7
    handler: s3_trigger.convert_video
    events:
      - existingS3:
          bucket: artclip-input
          events:
            - s3:ObjectCreated:*
    # role: arn:aws:iam::129219767314:role/artclip-lambda-job-role
    # role: artclip-lambdaJobRole
    role: LambdaJobRole1

  get:
    runtime: nodejs12.x
    handler: src/node/get.get
    events:
      - http:
          path: ${self:custom.base}/video/get/{id}
          method: get
          cors:
            origin: '*'
            headers: ${self:custom.allow-headers}
            allowCredentials: false
    role: LambdaJobRole1

  list_all:
    runtime: nodejs12.x
    handler: src/node/list.all
    events:
      - http:
          path: ${self:custom.base}/video/all/
          method: get
          cors:
            origin: '*'
            headers: ${self:custom.allow-headers}
            allowCredentials: false
    role: LambdaJobRole1

  nft_mint:
    runtime: nodejs12.x
    handler: src/node/mint.mint
    events:
      - http:
          path: ${self:custom.base}/nft/mint/{contentid}/{seq}/{owner}
          method: get
          cors:
            origin: '*'
            headers: ${self:custom.allow-headers}
            allowCredentials: false
    role: LambdaJobRole1
    
  
    
    
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

